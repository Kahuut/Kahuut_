from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401
from openapi_server.models.base_model import Model
from openapi_server import util

class Thema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, code=None, published=None):  # noqa: E501
        """Thema - a model defined in OpenAPI

        :param name: The name of this Thema.  # noqa: E501
        :type name: str
        :param code: The code of this Thema.  # noqa: E501
        :type code: str
        :param published: The published of this Thema.  # noqa: E501
        :type published: bool
        """
        self.openapi_types = {
            'name': str,
            'code': str,
            'published': bool
        }

        self.attribute_map = {
            'name': 'Name',
            'code': 'Code',
            'published': 'Published'
        }

        self._name = name
        self._code = code
        self._published = published

    @classmethod
    def from_dict(cls, dikt) -> 'Thema':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Thema of this Thema.  # noqa: E501
        :rtype: Thema
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Thema.

        :return: The name of this Thema.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Thema.

        :param name: The name of this Thema.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def code(self) -> str:
        """Gets the code of this Thema.

        :return: The code of this Thema.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code: str):
        """Sets the code of this Thema.

        :param code: The code of this Thema.
        :type code: str
        """
        self._code = code

    @property
    def published(self) -> bool:
        """Gets the published of this Thema.

        Gibt an, ob das Thema veröffentlicht ist  # noqa: E501

        :return: The published of this Thema.
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published: bool):
        """Sets the published of this Thema.

        Gibt an, ob das Thema veröffentlicht ist  # noqa: E501

        :param published: The published of this Thema.
        :type published: bool
        """
        if published is None:
            raise ValueError("Invalid value for `published`, must not be `None`")  # noqa: E501

        self._published = published

    def to_dict(self):
        """Konvertiert das Thema-Objekt in ein Dictionary zur JSON-Rückgabe."""
        return {
            "name": self._name,
            "code": self._code,
            "published": self._published
        }
