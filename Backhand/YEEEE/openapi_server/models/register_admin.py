from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class RegisterAdmin(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, email=None, password=None):  # noqa: E501
        """RegisterAdmin - a model defined in OpenAPI

        :param name: The name of this RegisterAdmin.  # noqa: E501
        :type name: str
        :param email: The email of this RegisterAdmin.  # noqa: E501
        :type email: str
        :param password: The password of this RegisterAdmin.  # noqa: E501
        :type password: str
        """
        self.openapi_types = {
            'name': str,
            'email': str,
            'password': str
        }

        self.attribute_map = {
            'name': 'name',
            'email': 'email',
            'password': 'password'
        }

        self._name = name
        self._email = email
        self._password = password

    @classmethod
    def from_dict(cls, dikt) -> 'RegisterAdmin':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RegisterAdmin of this RegisterAdmin.  # noqa: E501
        :rtype: RegisterAdmin
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this RegisterAdmin.


        :return: The name of this RegisterAdmin.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this RegisterAdmin.


        :param name: The name of this RegisterAdmin.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def email(self) -> str:
        """Gets the email of this RegisterAdmin.


        :return: The email of this RegisterAdmin.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this RegisterAdmin.


        :param email: The email of this RegisterAdmin.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def password(self) -> str:
        """Gets the password of this RegisterAdmin.


        :return: The password of this RegisterAdmin.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this RegisterAdmin.


        :param password: The password of this RegisterAdmin.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password
