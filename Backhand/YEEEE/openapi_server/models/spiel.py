from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Spiel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fk_id_user=None, fk_id_themen=None, zeit=None, punkte=None):  # noqa: E501
        """Spiel - a model defined in OpenAPI

        :param fk_id_user: The fk_id_user of this Spiel.  # noqa: E501
        :type fk_id_user: str
        :param fk_id_themen: The fk_id_themen of this Spiel.  # noqa: E501
        :type fk_id_themen: str
        :param zeit: The zeit of this Spiel.  # noqa: E501
        :type zeit: datetime
        :param punkte: The punkte of this Spiel.  # noqa: E501
        :type punkte: int
        """
        self.openapi_types = {
            'fk_id_user': str,
            'fk_id_themen': str,
            'zeit': datetime,
            'punkte': int
        }

        self.attribute_map = {
            'fk_id_user': 'fk_ID_User',
            'fk_id_themen': 'fk_ID_Themen',
            'zeit': 'Zeit',
            'punkte': 'Punkte'
        }

        self._fk_id_user = fk_id_user
        self._fk_id_themen = fk_id_themen
        self._zeit = zeit
        self._punkte = punkte

    @classmethod
    def from_dict(cls, dikt) -> 'Spiel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Spiel of this Spiel.  # noqa: E501
        :rtype: Spiel
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fk_id_user(self) -> str:
        """Gets the fk_id_user of this Spiel.


        :return: The fk_id_user of this Spiel.
        :rtype: str
        """
        return self._fk_id_user

    @fk_id_user.setter
    def fk_id_user(self, fk_id_user: str):
        """Sets the fk_id_user of this Spiel.


        :param fk_id_user: The fk_id_user of this Spiel.
        :type fk_id_user: str
        """
        if fk_id_user is None:
            raise ValueError("Invalid value for `fk_id_user`, must not be `None`")  # noqa: E501

        self._fk_id_user = fk_id_user

    @property
    def fk_id_themen(self) -> str:
        """Gets the fk_id_themen of this Spiel.


        :return: The fk_id_themen of this Spiel.
        :rtype: str
        """
        return self._fk_id_themen

    @fk_id_themen.setter
    def fk_id_themen(self, fk_id_themen: str):
        """Sets the fk_id_themen of this Spiel.


        :param fk_id_themen: The fk_id_themen of this Spiel.
        :type fk_id_themen: str
        """
        if fk_id_themen is None:
            raise ValueError("Invalid value for `fk_id_themen`, must not be `None`")  # noqa: E501

        self._fk_id_themen = fk_id_themen

    @property
    def zeit(self) -> datetime:
        """Gets the zeit of this Spiel.


        :return: The zeit of this Spiel.
        :rtype: datetime
        """
        return self._zeit

    @zeit.setter
    def zeit(self, zeit: datetime):
        """Sets the zeit of this Spiel.


        :param zeit: The zeit of this Spiel.
        :type zeit: datetime
        """

        self._zeit = zeit

    @property
    def punkte(self) -> int:
        """Gets the punkte of this Spiel.


        :return: The punkte of this Spiel.
        :rtype: int
        """
        return self._punkte

    @punkte.setter
    def punkte(self, punkte: int):
        """Sets the punkte of this Spiel.


        :param punkte: The punkte of this Spiel.
        :type punkte: int
        """
        if punkte is None:
            raise ValueError("Invalid value for `punkte`, must not be `None`")  # noqa: E501

        self._punkte = punkte
